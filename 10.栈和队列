mport java.util.ArrayList;

public class Solution {
    public boolean isValid(String s) {
        ArrayList<Character> stack = new ArrayList<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            switch (c) {
                case '(':
                case '[':
                case '{':
                    stack.add(c);
                    break;
                case ')':
                case ']':
                case '}': {
                    if (stack.isEmpty()) {
                        return false;
                    }
                    char left = stack.remove(stack.size() - 1);
                    if (!((left == '(' && c == ')')
                        || (left == '[' && c == ']')
                        || (left == '{' && c == '}'))) {

                        return false;
                    }
                    break;
                }
                default:
                    break;
            }
        }

        if (stack.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
}
import java.util.Arrays;

public class Stack {
	private int[] array;
	private int top;
	
	public Stack(int defaultCapacity) {
		array = new int[defaultCapacity];
		top = 0;
	}
	
	public Stack() {
		this(20);
	}
	
	public void push(int val) {
		if (top == array.length) {
			array = Arrays.copyOf(array, array.length * 2);
		}
		array[top++] = val;
	}
	
	public void pop() {
		if (top <= 0) {
			System.out.println("栈为空，无法删除");
			return;
		}
		
		top--;
		array[top] = 0;	// 可加可不加，把所有空的位置保持为 0
	}
	
	public int top() {
		if (top <= 0) {
			System.out.println("栈为空，无法返回栈顶元素");
			return -1;
		}
		
		return array[top - 1];
	}
	
	public int size() {
		return top;
	}
	
	public boolean isEmpty() {
		return top == 0;
	}
}

class MyCircularQueue {
    private int[] array;
    private int size;
    private int front;
    private int rear;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        array = new int[k];
        size = 0;
        front = 0;
        rear = 0;
    }

    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if (size == array.length) {
            return false;
        }

        array[rear] = value;
        rear = (rear + 1) % array.length;
        size++;
        return true;
    }

    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if (size == 0) {
            return false;
        }

        front = (front + 1) % array.length;
        size--;
        return true;
    }

    /** Get the front item from the queue. */
    public int Front() {
        if (size == 0) {
            return -1;
        }

        return array[front];
    }

    /** Get the last item from the queue. */
    public int Rear() {
        if (size == 0) {
            return -1;
        }

        int index = (rear + array.length - 1) % array.length;
        return array[index];
    }

    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return size == 0;
    }

    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return size == array.length;
    }
}

mport java.util.ArrayList;

public class MinStackB {
    private ArrayList<Integer> normal;
    private ArrayList<Integer> min;

    public MinStackB() {
        normal = new ArrayList<>();
        min = new ArrayList<>();
    }

    public void push(int x) {
        normal.add(x);

        if (min.isEmpty()) {
            min.add(x);
        } else if (x <= min.get(min.size() - 1)){
            min.add(x);
        }
    }

    public void pop() {
        int v = normal.remove(normal.size() - 1);
        if (v == min.get(min.size() - 1)) {
            min.remove(min.size() - 1);
        }
    }

    public int top() {
        return normal.get(normal.size() - 1);
    }

    public int getMin() {
        return min.get(min.size() - 1);
    }
}

class Node {
    int val;
    Node next;

    Node(int val, Node next) {
        this.val = val;
        this.next = next;
    }

    Node(int val) {
        this(val, null);
    }
}

public class Queue {
    private Node front = null;  // 链表的第一个结点
    private Node rear = null;   // 链表的最后一个结点
    private int size = 0;

    // 尾插
    public void push(int val) {
        Node node = new Node(val);
        if (front == null) {
            front = node;
        } else {
            rear.next = node;
        }

        rear = node;
        size++;
    }

    // 头删
    public void pop() {
        if (size <= 0) {
            System.out.println("队列为空");
            return;
        }

        front = front.next;
        if (front == null) {
            rear = null;
        }
        size--;
    }

    public int front() {
        if (size <= 0) {
            System.out.println("队列为空");
            return -1;
        }

        return front.val;
    }

    public int rear() {
        if (size <= 0) {
            System.out.println("队列为空");
            return -1;
        }

        return rear.val;
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }
}



mport java.util.ArrayList;

public class Solution {
    public boolean isValid(String s) {
        ArrayList<Character> stack = new ArrayList<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            switch (c) {
                case '(':
                case '[':
                case '{':
                    stack.add(c);
                    break;
                case ')':
                case ']':
                case '}': {
                    if (stack.isEmpty()) {
                        return false;
                    }
                    char left = stack.remove(stack.size() - 1);
                    if (!((left == '(' && c == ')')
                        || (left == '[' && c == ']')
                        || (left == '{' && c == '}'))) {

                        return false;
                    }
                    break;
                }
                default:
                    break;
            }
        }

        if (stack.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
}




