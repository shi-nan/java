-class 类
 类是一组蓝图，设计图稿；类名每个单词首字母大写，后面可以有字母；类名与文件名一致
-Object 
 对象拿着蓝图制造出一组实例
-method 方法
 主方法是入口；相当于C语言的函数function
-变量 variable
 语法规则：变量类型  标识符identifier（变量名称）
 1.字面量(Literal)     int a=10
 2.另一个变量          int b=a;
 3.方法的返回值        int  m=max(a,b)
 如果两边的类型一样，可以赋值
 左边的类型比较大
 long a=10    隐式类型转换
 或者右边的类型比较大
  int a=10L(会报错）
  int a=(int)10L；强制类型转换/显示类型转换
 -标识符identifier规定
  1.必须以字母开头（不能以数字或者特殊字符开头）
  2.可以跟字母、数字、下划线_、$
  3.长度可以无限长
  4.不能用关键字起名字
  规范
  1.永远不要用中文作为标识符
  2.不要出现$
  3.不要出现下划线_,除了定义不可变的变量
  4.变量（名词） 首个单词全小写，后边首字母大写，其他小写
  5.方法（动词） 首个单词全小写，后边首字母大写，其他小写
  6.类名（名词)  每个单词首字母大写，其他小写
  阿⾥编码规范：
  1. 代码中的命名均不能以下划线或美元符号开始，也不能以下划线和美元符号结束。
  2. 代码命名严禁使⽤拼⾳与英⽂混合的⽅式，更不允许直接使⽤中⽂。
  3. 类名使⽤UpperCamelCase⻛格，⽅法名、参数名、成员变量、局部变量统⼀使⽤lowerCamelCase⻛格。
  4. 常量命名全部⼤写，单词间⽤下划线隔开。
 -变量类型
 一.基本类型
    1.数值类型
      整型 
      byte  1字节   byte a=-128; byte b=127;System.out.println(a-1);System.out.println(b+1); 输出-129；128 实际上强转为int类型
      short 2字节
      int   4字节  10  int maxValue = Integer.MAX_VALUE;int minValue = Integer.MIN_VALUE;
                      System.out.println(maxValue+1);System.out.println(minValue-1);最小值-1 为最大值；最大值+1 为最小值
      long  8字节  10L
      四种进制表示 二进制 0b/0B   八进制  0      十进制      十六进制 0Xff
      浮点类型 float 4字节  1.0F  double 8字节  1.0
      字符类型 char  2字节(Unicode码点） char c='\u4e2d'   1.任何情况都是UTF-8 
    2.布尔类型 boolean true/false 引用字面量null
 二.引用类型
    1.数组引用
    2.类引用
    3.接口引用
-运算符
-什么是 Unicode
 ASCII 7bit A-Z
 Unicode
 GB      国标 一个中文占2个字节
 UTF-8   中文占3个字节
 -方法定义
  public static 返回值类型 方法名称（形参列表）{
  }
 -方法调用
  方法名称（实参列表）
 -赋值的内存模型理解
  类型：框的大小
  变量名：主要用于在编译期间；用处是通过名称找到框；
  赋值操作：把值按照布局放到框中
-System.out.printf("%n");%n是因为Java是无关环境的，Windows上是\r\n;而Linux/unix是\n;
-短路与、或
--当使⽤"&"时，明确的表示多个条件都判断了，如果在多个表达式中有条件返回了false，剩余的条件也要判断；⽽如果使⽤"&&"(短路与)，只要有条件返回false，
  剩余条件不再判断，返回false。
--当使⽤"|"时，明确的表示多个条件都判断了，如果在多个表达式中有条件返回了true，剩余的条件也要判断；⽽如果使⽤"||"(短路⾮)，只要有条件返回true，
  剩余条件不再判断，返回true。
-在Java中，程序⼀共有三种结构：顺序结构、条件结构、循环结构、子路径结构
-条件结构
--if(布尔表达式){
 //条件满⾜时执⾏代码
 }else{
 //条件不满⾜时执⾏代码
 }
--switch(数字|枚举|字符|字符串){
case 内容1 : {
内容满⾜时执⾏语句; [break;]
}
case 内容2 : {
内容满⾜时执⾏语句; [break;]
}
- 循环结构
--while(循环结束条件判断){
  循环语句;
  修改修改循环结束判断; }
--do{
  循环语句;
  修改循环结束判断; }while(循环结束条件判断);
--for(循环初始化;循环结束判断;修改循环结束条件){
  循环体; }
  --foreach
  int[] a={1,2,3,4,5};
  for(int i=0;i<a.length;i++){
   System.out.println(a[i]);
   }
  foreach(int v:a){//v是变量，a是容器
  System.out.println(v);
   }
 -break & continue
   break label:
   continue label:
   continue:执⾏到此语句时会跳过当前循环的剩余部分，返回循环判断;
   break:退出整个循环.
   
-方法
--⽅法的定义
 限定符:Modifers（public，static） 返回值类型（void) 方法名称（main） （形参列表 String []args) 异常列表
 形参 ：paraments
 实参：arguments
--⽅法的调用
 方法名称（实参列表)
--方法调用的过程（内存模型）
 入口——主方法 （局部变量/形参）调用过程是值拷贝的过程 方法调用栈 形参的改变不会改变实参
-方法重载(overload）：⽅法名称相同、参数列表不同；
 ⽅法的签名：指的是⽅法名与参数，返回类型不是签名的⼀部分。
 
-数组
 int a={1,2,3...}
 int []a=new int [5];//如果数组中的元素没有初始化，元素的值计算对应类型的默认值 int 0 double 0.0 只定义一个数组类型的引用变量
 int []a=new int[5]{1,2,3...}
--引用类型
  java的内存模型   
 - 引用的方法调用也是值传递 形参的改变不会影响实参
   int a[]=null ;a 引用没有指向任何数组
 - 引用类型是个线索 用来找到堆中的真正数据
 - java中的垃圾回收（garbage collection）
 - -谁是垃圾？
 - 没有使用价值的；没有引用指向的对象（数组）在适当的时候回收它
 --数组操作
   获取数组的长度 a.length /字符 String s s.length()
                NullPointerException
   遍历数组 foreach(int element:a){
           element;
           }
 --理解引用
   1.引用是用来找到实际对象的线索 
          指向
   引用------------对象
   2.java内存中有3个区域
     栈区 堆区 方法区
   3.变量四种
   形参            栈
   局部变量         栈
   属性            堆   a[0] 所有对象
   静态属性        方法区（随着方法存在在方法区）
   4.一些操作的理解
    int[]a={1,2,3,4,5}
    int[]b=a;//b也指向a指向的数组对象
    1)b={10,11,12}//b重新指向新的数组对象，不会影响a和a指向的对象
    2)b[0]=100;//改变的是b指向的数组对象的内容，会影响a
   5.方法调用
     入口——主方法 （局部变量/形参）调用过程是值拷贝的过程 方法调用栈 形参的改变不会改变实参
   --JDK支持的一些数组操作
     java.util.Arrays包
     System.arraycopy(源数组引用，源下标，目标数组引用，目标下标，长度）；
     Arrays.fill(int []a,int v);
     Arrays.copyOf(int []a,int newLengeth)
     Arrays.copyOfRange(int []a,int from,int to);
   --多维数组
     int【】【】a={{1,2,3}，{4,5}，null}；
     java中多维数组存的元素是引用；所以有阶梯状的数组
  --对象数组
    元素是指向对象的引用
    
  -类和对象
   面向对象的三大特性：封装 继承 多态
   1）定义类的语法
     修饰符（modifer）class 类名称{
      1.属性
      2.方法
      3.构造方法
      }
   2）如何定义属性 
      修饰符（modifer） 变量类型 变量名称= ；
      默认值：与变量相关
   3）如何定义方法
      修饰符（modifer） 返回值类型 方法名（形参列表）{
      }
   4）如何定义构造方法
      修饰符（modifer） 类名（形参列表）
   2.构造对象的方法/对象实例化的语法
     类名称 变量名称=new 类名称（实参列表）
     new 类名称（实参列表）；//匿名对象
   3.一个文件中只能有一个public的类
   4.1）new 计算对象需要的内存大小开辟空间 会把开辟好的空间全部初始化为0;
     malloc(sizeof(Person))
     2）调用构造方法，对属性进行初始化；
     3）构造方法调用结束后，返回一个指向新对象的引用：
        Person tmp=新的对象
   5.一旦定义过构造方法无论什么样的构造方法，默认这个无参
   6.对象中存储的最主要的是属性，也可以找到方法区中对象相对应的类
   7.如何访问对象的属性和方法
     1）在类的内部---直接调用
     2）在类的内部--Person p=new Person(); p.methodA()；p.a;引用.属性名称；引用.方法名称(实参列表)
   8.嵌套调用和链式调用
     嵌套调用：System.out.println(Arrays.toString(rotate(a,3)));
     链式调用：new A().create（）.create().create(）.create();
   9.this关键字的使用
     1）在构造方法中调用其他构造方法，调用语句必须出现在第一行；
       public Person(String name){
          this();//调⽤本类⽆参构造
          this.name = name ;
       }
     2）通过this访问属性或方法
         private String name;
         private int age;
         public Person(String name,int age){
            this.name = name ;
            this.age = age ;
         }
     3）this代表就是当前对象的引用（current object）
        class Person{
          String name;
          
          public Person(String name){this.name=name;}
          public String toString(){return this.name;}
          public boolean equals(Person p){
             return p.name=this.name;
          }
           public void test(){
            this equals(this);
           }
      
      1）访问限定符
1.顶级
2.成员级
1.public 2.package-private 3.protected 4.private 
1.public 2.空白 3.protected 4.private
2）static 限定符
     静态属性和静态方法
     静态属性保存在类/方法中
     static 最关键作用，就是和对象解绑
      1.属性 没有存在在对象中，存在在类中
      2.方法   没有一个隐式的当前对象引用this 

1.在静态方法中（静态上下文）无法使用非静态内容；静态方法中，无法访问普通属性，无法调用普通方法，无法使用this关键字；
2.静态属性的存在并且只存在一份，表现出共享的特性，类似全局变量
规范：访问限定符，然后出现static
public static   更好
static public   语法不错
3.属性（包括静态属性）的初始化规则
   1）初始化的方式
       静态属性：定义时直接初始化
   2）利用静态代码块初始化
         语法 static { 初始化代码块 }

普通：
1）定义时直接初始化；
2）初始化代码块初始化
          语法{初始化语句}

3）在构造方法中；
时机：
   静态属性：           类被加载到内存中时
   普通属性：            对象被实例化时
顺序：
1）类的加载一定发生在对象实例化之前、静态属性的初始化一定在普通属性的之前
2）静态属性的初始化顺序，按照定义类时的书写顺序初始化
3）普通属性的初始化顺序， 定义时和构造代码块按书写顺序初始化，构造方法中的初始化一定发生       在最后，和书写顺序无关；


数据结构-复杂度
复杂度：不求甚解的衡量算法好坏的刻度尺
空间复杂度
时间复杂度  ：
           直接利用允许时间衡量不现实。测试环境多变，不好控制变量
前提：如果指定cpu的情况下，单位时间内运行的基本指令个数是固定的
如果一个算法需要的指令比另一个指令需要的指令个数小，就可以推出算法A的运行时间更快
前提：算法计算的快慢和输入数据的规模是有关系的

粗略计算算法的快慢 
n:输入数据的规模
F(n):在n数据规模的情况下，基本指令的个数

继续不求甚解，大O渐进表示法
1）保留最高次项
2）最高次项的系数化为1

算法的快慢还和最好情况、平均情况、最坏情况有关
复杂度：最好|平均|最坏
优先关注最坏情况 其次看平均情况 最好情况关注比较少
O（1）最好的算法

顺序表和链表
线性表
数据结构
     初始化       （构造方法）
     增/删/查/改（普通方法）
     销毁

线性结构
    顺序表
//顺序表的元素类型 int
public class MyArrayList{
	//属性是什么
	private int []array;//代表的是存放数据的数组
                        //array.length 代表的是数组的容量
	private int size;	//记录顺序表的已有数据个数
	//构造方法
	public MyArrayList(){
		//1.申请空间
		array=new int[2];
		//2.初始化数据个数
		size=0;
	}

	//增
	//尾插
	public void pushBack(int element){
		//TODO:先不考虑array 数组放不下的问题
		array[size++]=element;
	}//时间复杂度：O（1）
 
	//头插
	//从后往前移  避免覆盖
	public void pushFront(int element){
		for(int i=size;i>=1;i--){
			array[i]=array[i-1];
		}//i是空心
		array[0]=element;
		size++;
	}//时间复杂度：O(n)
	
	//指定下标位置插数据
	public void insert(int index,int e,int []array,int size){
		//for(int i=size;i>index;i--){
		//	array[i]=array[i-1];//i是空心
		//}
		if (index < 0 || index > size) {
			System.err.println("下标错误");
			return;
		}
		for(int i=size-1;i>=index;i--){
			array[i+1]=array[i];
		}//i是实心
		array[index]=e;
		size++;
	}/时间复杂度：O()

  
	//删
    //尾删
	public void popBack(){
		if(size<=0){
			System.err.println("顺序表为空");
			return;
		}
		array[--size] = 0;
	}//时间复杂度：O（1）
 
 //头删
	public void popFront(){
	//从前往后移 
	if(size<=0){
			System.out.println("顺序表为空");
			return;
		}
    for(int i=0;i<size-1;i++){
        array[i]=array[i+1];//i是空心
	}
	array[--size] = 0;
	}
 
 //删除下标位置的数
	public void earse(int index) {
		if (size <= 0) {
			System.err.println("顺序表为空");
			return;
		}
		if (index < 0 || index >= size) {
			System.err.println("下标错误");
			return;
		}
		for(int i=index+1;i<size;i++){
			array[i-1]=array[i];//i是实心
		}
		array[--size] = 0;
	}

	//查
	//改
		
考虑数组容量（array.length）和已有数据个数（size）的关系
1.容量是够用的 size<array.length
2.插入k个数 size+k<=array.length
3.容量不够用怎么办 
   int newCapacity =array.length*2;
   1)int [ ]newArray=new int[newCapacity];
   2)for(int i=0;i<size;i++){
       newArray[i]=array[i];
      }
  3)this.array=newArray;
      原来的数组对象变成垃圾 没有引用
      扩容的空间越小，空间浪费越小
      扩容的空间越大，需要扩容飞频率越少
      
      经验值  大概是1.5倍或2倍
//保证容量够用，否则进行扩容
	private void ensureCapacity(){
		if(size<array.length){
			return;
		}
		 int newCapacity =array.length*2;
		 int [ ]newArray=new int[newCapacity];
		 for(int i=0;i<size;i++){
             newArray[i]=array[i];
         }
	     this.array=newArray;
	}//时间复杂度：最坏：O(n)




IDE (集成开发环境）
Integration Development Environment
 
Notepad++  编辑器（Text Editor)
javac           编译器（Compiler)
java             运行环境（Run time)
jdb               调试器（D

     
