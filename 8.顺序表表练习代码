//顺序表的元素类型 int
public class MyArrayList{
	//属性是什么
	private int []array;//代表的是存放数据的数组
						//array.length 代表的是数组的容量
	private int size;	//记录顺序表的已有数据个数
	//构造方法
	public MyArrayList(){
		//1.申请空间
		array=new int[2];
		//2.初始化数据个数
		size=0;
	}
	//增
	//平均O(1)
  
	//尾插
	public void pushBack(int element){
		ensureCapacity();
		//TODO:先不考虑array 数组放不下的问题
		array[size++]=element;
	}//时间复杂度：O（1）
	
	//头插
	//从后往前移  避免覆盖
	public void pushFront(int element){
		ensureCapacity();
		for(int i=size;i>=1;i--){
			array[i]=array[i-1];
		}//i是空心
		array[0]=element;
		size++;
	}//时间复杂度：O(n)
	
	//指定下标位置插数据
	public void insert(int index,int e,int []array,int size){
		//for(int i=size;i>index;i--){
		//	array[i]=array[i-1];//i是空心
		//}
		ensureCapacity();
		if (index < 0 || index > size) {
			System.err.println("下标错误");
			return;
		}
		for(int i=size-1;i>=index;i--){
			array[i+1]=array[i];
		}//i是实心
		array[index]=e;
		size++;
	}/时间复杂度：O()
	
	//删
	//尾删
	public void popBack(){
		if(size<=0){
			System.out.println("顺序表为空");
			return;
		}
		array[--size] = 0;
	}//时间复杂度：O（1）
	
	//头删
	public void popFront(){
	//从前往后移 
	if(size<=0){
			System.out.println("顺序表为空");
			return;
		}
    for(int i=0;i<size-1;i++){
        array[i]=array[i+1];//i是空心
	}
	array[--size] = 0;
	}
	
	//删除下标位置的数
	public void earse(int index) {
		if (size <= 0) {
			System.err.println("顺序表为空");
			return;
		}
		if (index < 0 || index >= size) {
			System.err.println("下标错误");
			return;
		}
		for(int i=index+1;i<size;i++){
			array[i-1]=array[i];//i是实心
		}
		array[--size] = 0;
	} 
	
	//删掉某一个元素，如果出现多次，删除第一次出现的位置
	public void remove(int element){
		int index=indexOf(element);
		if(index!=-1){
			earse(index);
		}
	}
		
//删掉某一个元素，如果出现多次，全部删除
	public void removeAll(int element){
		/* 时间:O(n^2)	时间：O(1)
		int index;
		while((index=indexOf(element)){
			earse(index);
		}*/
	/* 时间: O(n)	空间: O(n)
		int[] newArray = new int[array.length];
		int j = 0;
		for (int i = 0; i < size; i++) {
			if (array[i] != element) {
				newArray[j++] = array[i];
			}
		}
		array = newArray;
		size = j;
		*/
     // 时间：O(n)	空间：O(1)
		int j = 0;
		for (int i = 0; i < size; i++) {
			if (array[i] != element) {
				array[j++] = array[i];
			}
		}
		size = j;
	}
	
	public int size(){
		return size;
	}
	
	public boolean isEmpty(){
		return size==0;
	}
			
	
	//查
	//返回element在顺序表中的下标，如果出现多次，返回第一次出现的下标
	public int indexOf(int element){
		for(int i<0;i<size;i++){
			if(array[i]=element){
				return i;
			}
		}
		return -1;
	}
	
	//改
	public int get(int index){
		if(index<0||index>=size){
			System.out.println("index error");
		}
			return array[index];
	}
	
	public void set(int index,int element){
		if(index<0||index>=size){
			System.out.println("index error");
		}
		array[index]=element;
	}
	
	//打印	
	public void print(){
		System.out.println("打印顺序表：");
		for(int i=0;i<size;i++){
			System.out.println(array[i]+" ");
		}
		System.out.println();
	}
	 
	public static void main(String []args){
		MyArrayList list=new MyArrayList();
	} 
	
	//保证容量够用，否则进行扩容
	private void ensureCapacity(){
		if(size<array.length){
			return;
		}
		 int newCapacity =array.length*2;
		 int [ ]newArray=new int[newCapacity];
		 for(int i=0;i<size;i++){
             newArray[i]=array[i];
         }
	     this.array=newArray;
	}//时间复杂度：最坏：O(n)
