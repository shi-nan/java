class Node{
	int val;//int val;	// data | element
	Node next;	// 后继 如果 next == null 表示是最后一个结点

	Node(int val) {
		this.val = val;
		this.next = null;
	}
}
public class MyLinkedList {
	public static void main(String[] args) {
		Node head = null;//定义初始化
		//head的意思是第一个结点		                
		// 通过第一个结点，就可以找到完整的链表的所有结点
		// 所以，链表的第一个结点往往代表整个链表
		// 空的链表，就是一个结点都没有的链表
		// 也就没有第一个结点
		// head == null 表示第一个结点不存在
		// 也就是整个链表为空
	}
}
	//插
	//头插
	//head ：原来的第一个结点
	//val：要插入的值
	// 返回：新的第一个结点
	private Node pushFront(int val，Node head){
		int val=0;
		//1.结点
		Node node=new int(val);
		//2.让原来的head成为node的下一个结点
		node.next=head;
		//3.更新第一个结点的引用
		//head=node;
		return node;
	}
	
	//尾插
	private static Node pushBack(Node head,int val){
		if(head==null){
			Node node=new int(val);
			return node;
		}
		else{
			Node last=head;//先从head开始找
			while(last.next!=null){
				last=last.next;
			}
			last.next=node;
			
			return head;
		}
	}
	
	//删除
	//头删
	private Node popFront(Node head){
		if(head==null){
			System.err.println("空链表无法删除");
			return;
		}
		return head.next;
	}
	
	//尾删
	private Node popBack(Node head){
		if(head==null){
			System.err.println("空链表无法删除");
			return;
		}
		if(head.next==null){
			return null;
		}
		else {
			Node lastsecond=head;
			while(lastsecond.next.next!=null){
			lastsecond=lastsecond.next;
			}
			return head;
		}
	}
	
//反转链表 不能创造新的结点
class solution{
  public ListNode reverseList1(ListNode head){
	  ListNode result=null;
	  ListNode cur=head;
	  
	  while(cur!=null){
		  ListNode next=cur.next;
		  cur.next=result;
		  result=cur;
		  
		  cur=next;
	  }
	  return result;
	}
  }	

 public ListNode reverseList2(ListNode head){ 
	if(head==null){
		return null;
	}
    ListNode p1=null;
	ListNode p2=head;
	ListNode p3=head.next;
	 while(p2!=null){
		 p2.next=p1;
		 p1=p2;
		 p2=p3;
		 if(p3!=null){
			 p3=p3.next;
		 }
	 }
	 return p1;
 }
	
	
	public ListNode reverseList3(ListNode head){ 
    ListNode p1=null;
	ListNode p2=head;
	 while(p2!=null){
		 ListNode p3=p2.next;
		 
		 p2.next=p1;
		 
		 p1=p2;
		 p2=p3;
		 if(p3!=null){
			 p3=p3.next;
		 }
	 }
	 return p1;
 }

public class test {
    public static void main(String []args){
        Node n1=new Node.new Node(1);

    }
    class Node{
        int val;
        Node(int val) {
            this.val = val;
            this.next = null;
        }
Node removeALL(Node head,int val) {//遍历原链表，发现结点的值是val,就删除该结点
    Node prev = null;//做删除
    Node cur = head;//从头结点开始遍历
    while (cur != null) {
        if (cur.val == val) {
            if (cur == head) {
                head = cur.next;
            } else {
                prev.next = cur.next;
            }
    else{
                prev = cur;
            }
            cur = cur.next;
        }
        return head;
    }
}
//合并有序列表
}
//面试题第五题-链表分割
public Node partition(Node head,int x) {
    Node small = null;
    Node smallLast = null;

    Node big = null;
    Node bigLast = null;

    Node cur = head;
    while (cur != null) {
        if (small.val < x) {
            if (small == null) {
                small = cur;
            } else {
                smallLast.next = cur;
            }
            smallLast = cur;
        }
    }
    cur = cur.next;

    if (head == null) {
        return small;
    } else {
        while (small.val < x) {
            if (small.next != null) {
                small = small.next;
            }

        }
    }
}
//链表的中间结点
//private int getLengrh
//
            private int getLength(Node head,int K=k){
                int length=0;
                 while( Node cur=head;cur!=null;cur=cur.next){
                        length++;
                 }

                        }
//替换法
node.val=node.next.val;
node.next=node.next.next;
// 链表的回文结构

public class Solution {
    private int getLength(ListNode head) {
        int len = 0;
        for (ListNode c = head; c != null; c = c.next) {
            len++;
        }
        
        return len;
    }
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int lenA = getLength(headA);
        int lenB = getLength(headB);
        
        ListNode longer = headA;
        ListNode shorter = headB;
        int diff = lenA - lenB;
        if (lenA < lenB) {
            longer = headB;
            shorter = headA;
            diff = lenB - lenA;
        }
        
        for (int i = 0; i < diff; i++) {
            longer = longer.next;
        }
        
        while (longer != shorter) {
            longer = longer.next;
            shorter = shorter.next;
        }
        
        return longer;
    }
}



public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        // fast 遇到 null，表示不带环，返回 null
        // fast == slow，表示遇到相遇点了
        do {
            if (fast == null) {
                return null;
            }
            fast = fast.next;
            if (fast == null) {
                return null;
            }
            fast = fast.next;
            slow = slow.next;
        } while (fast != slow);
        // 求相遇点
        // 如果快的遇到 null，表示没有环，直接返回 null
        // 相遇点出发 + 起点出发，最终相遇
        ListNode p = head;
        ListNode q = slow;
        while (p != q) {
            p = p.next;
            q = q.next;
        }
        
        return p;
    }
}

public class Solution {
    CNode copy(CNode head) {
        if (head == null) {
            return null;
        }

        CNode p1 = head;
        while (p1 != null) {
            CNode p2 = new CNode(p1.val);

            p2.next = p1.next;
            p1.next = p2;

            p1 = p2.next;
        }

        p1 = head;
        while (p1 != null) {
            CNode p2 = p1.next;
            if (p1.random != null) {
                p2.random = p1.random.next;
            }

            p1 = p2.next;
        }

        p1 = head;
        CNode newHead = head.next;
        while (p1 != null) {
            CNode p2 = p1.next;
            p1.next = p2.next;
            if (p2.next != null) {
                p2.next = p2.next.next;
            }
class Stack{
    private int []array;
    private int top;
    Stack(){
        array=new int[10];
        size=0;
    }
    void push(int val){
        if(top<array.length){
            array[top++]=val;
        }
        else {
            int newCapacity=array.length*2;
            int newArray[]=new int[newCapacity];
            
            for(int i=0;i<top;i++){
                newArray[i]=array[i];
                }
            }
        }
       
    }
    void pop(){
        if(size==0){
            System.out.println("删除失败");
        }
        else{
            array[--top]=0;
        }  
    }
    
    
栈的应用：
回溯（深度优先遍历）
1）迷宫 

import java.util.ArrayList;
import java.util.LinkedList;

class Person {
    public String name;
    public int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        ArrayList<Person> arrayList = new ArrayList<>();
        arrayList.add(new Person("A", 7));
        arrayList.add(new Person("B", 9));
        arrayList.add(new Person("C", 19));

        for (int i = 0; i < arrayList.size(); i++) {
            Person p = arrayList.get(i);
            System.out.println(p.name + ":" + p.age);
        }

        for (Person p : arrayList) {
            System.out.println(p.name + ":" + p.age);
        }

        LinkedList<Person> linkedList = new LinkedList<>();
        linkedList.add(new Person("A", 7));
        linkedList.add(new Person("B", 9));
        linkedList.add(new Person("C", 19));

        for (int i = 0; i < arrayList.size(); i++) {
            Person p = arrayList.get(i);
            System.out.println(p.name + ":" + p.age);
        }

        for (Person p : arrayList) {
            System.out.println(p.name + ":" + p.age);
